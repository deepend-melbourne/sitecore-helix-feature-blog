@using Glass.Mapper.Sc.Web.Mvc
@using Sitecore.Feature.Blog.Models
@using System.Collections.Generic
@using Sitecore.Foundation.Grid.Models
@using Sitecore.Foundation.Alerts.Models
@using Sitecore.Foundation.Alerts.Extensions
@using Sitecore.Foundation.Indexing.Search.Models
@using System.Linq

@inherits GlassView<SearchResponse<IBlogArticle>>

@if (!Model.Results.Any() && Sitecore.Context.PageMode.IsExperienceEditor)
{
    var warningModel = new RenderingAlertModel()
    {
        Title = "Blog Listing (No articles)",
        Description = "There are no articles to display. When you view this rendering in the experience editor, outside the context of a site, no articles will display. This message will not display when viewed normally."
    };
    <div class="grid-container">

        <div class="grid-x grid-padding-x">
            <div class="cell">
                @Html.ShowRenderingAlert(warningModel)
            </div>
        </div>
    </div>

    return;
}

<div class="grid-container">

    <div class="grid-x grid-padding-x">


        @foreach (var blog in Model.Results)
        {
            if (blog == null)
            {
                continue;
            }

            //TODO: need to right class for this;
            var themeClass = blog.ArticleType?.Name == "Blog" ? "d-family" : "d-early";
        <div class="@themeClass">
            <section class="box">
                <header>
                    <div class="box__tab-tiny"></div>
                    <div class="box__header">
                        <p class="box__header__sup">
                            @(blog.ArticleType?.Name)
                        </p>
                        <h2 class="h6 box-module__title mb0">@blog.BlogTitle</h2>
                    </div>
                </header>
                <div class="box__body">
                    <p>@blog.BlogIntroduction</p>
                    <p class="mb0">
                        <a href="@blog.Url" class="button button-transparent" id="">
                            <i class="icon icon-chevron-right "></i>        <span class="button__text">Read more</span>
                        </a>
                    </p>
                </div>
            </section>
        </div>
}



    </div>
    <ul>
        @foreach (var page in Enumerable.Range(1, Model.TotalPages))
        {
            var isCurrent = page == Model.Page;
            <li class="@(isCurrent ? "current" : string.Empty)">
                @if (!isCurrent)
                {
                    <a href="?page=@page">@page</a>
                }
                else
                {
                    <span>@page</span>
                }
            </li>
        }
    </ul>
</div>
